// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SubjectSelection.Models;
using System;

namespace SubjectSelection.Migrations
{
    [DbContext(typeof(SubjectSelectionDbContext))]
    [Migration("20171209181943_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SubjectSelection.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<string>("ClassDate");

                    b.Property<string>("Name");

                    b.Property<int>("SubjectId");

                    b.Property<int?>("UserId");

                    b.HasKey("GroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SubjectSelection.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("ParentListId");

                    b.Property<int?>("UserId");

                    b.HasKey("SubjectId");

                    b.HasIndex("ParentListId");

                    b.HasIndex("UserId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SubjectSelection.Models.SubjectList", b =>
                {
                    b.Property<int>("SubjectListId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OwnerId");

                    b.Property<int?>("SubjectListId1");

                    b.HasKey("SubjectListId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SubjectListId1");

                    b.ToTable("SubjectLists");
                });

            modelBuilder.Entity("SubjectSelection.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("StudentCardId");

                    b.Property<string>("Username");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SubjectSelection.Models.Group", b =>
                {
                    b.HasOne("SubjectSelection.Models.Subject", "Subject")
                        .WithMany("Groups")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SubjectSelection.Models.User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SubjectSelection.Models.Subject", b =>
                {
                    b.HasOne("SubjectSelection.Models.SubjectList", "ParentList")
                        .WithMany("Subjects")
                        .HasForeignKey("ParentListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SubjectSelection.Models.User")
                        .WithMany("UserEditableSubjects")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SubjectSelection.Models.SubjectList", b =>
                {
                    b.HasOne("SubjectSelection.Models.User", "Owner")
                        .WithMany("UserEditableLists")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SubjectSelection.Models.SubjectList")
                        .WithMany("ExclusiveSubjectLists")
                        .HasForeignKey("SubjectListId1");
                });
#pragma warning restore 612, 618
        }
    }
}
